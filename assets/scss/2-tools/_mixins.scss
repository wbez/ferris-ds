// @mixin font-setting
//
// This will help us move away from silent classes for setting font-families. It still keeps our two main font-family rules in one place. <code class="ds-breathe-m">p { @include font-setting('secondary') }</code>
//
// $type = 'primary' - Version of font-setting. Options: primary | secondary
//
//
// Styleguide 2.1.1
@mixin font-setting($type: 'primary') {
  @if $type == 'secondary' {
    font-family: $font-family-secondary-fallback;

    .fonts-loaded & {
      font-family: $font-family-secondary;
    }
  } @else {
    font-family: $font-family-primary-fallback;

    .fonts-loaded & {
      font-family: $font-family-primary;
    }
  }
}


// @mixin underlined-link
//
// This will replace the need for silent classes, specifically <code>%link--teal</code>.  To use this mixin, apply to an <code>a</code> tag to add special link style. Example: <code class="ds-breathe-m"> a { @include underlined-link }</code>
//
// $subtle = false - Whether this is a subtle or default variation. Options: true | false
//
// Styleguide 2.1.2
//
@mixin underlined-link($subtle: false) {
  // Set color var
  $border-hover-color: $color-blue-light;
  @if ( $subtle == false ) {
    $border-hover-color: $color-teal-gray;
    // Include on non hover state if not subtle (default)
    border-bottom: 1px solid $color-blue-light;
    box-shadow: inset 0 -1px 0 0 $color-blue-light;
  }
  font-weight: inherit;
  color: inherit;
  transition: all .8s ease;

  &:hover,
  &:active {
    border-bottom: 1px solid $border-hover-color;
    box-shadow: inset 0 -2px 0 0 $border-hover-color;
    text-decoration: none;
  }
}


// @mixin underlined-link-parent
//
// This is an extension of the <code>underlined-link</code> mixin. This version is applied to a parent to force all descendant <code>a</code> tags get a special link style. Example: <code class="ds-breathe-m"> .text-block-with-subtle-links { @include underlined-link-parent('true') }</code>
//
// $subtle = false - Whether or not this a subtle or default variation. Options: true | false
//
// Styleguide 2.1.3
//
@mixin underlined-link-parent($subtle: false) {
  a:not(.t-unlink) {
    @include underlined-link($subtle)
  }
}


// @mixin mq
//
// This is a mixin helper imported via NPM via the <a href="https://github.com/sass-mq/sass-mq">Sass MQ library</a> <code class="ds-breathe-m">@include mq($from: bp-m, $and: '(orientation: landscape)') {}</code>
//
// $from = false -  {String | Boolean} One of $mq-breakpoints
// $until = false - {String | Boolean}  One of $mq-breakpoints
// $and = false - {String | Boolean}  Additional media query parameters
// $media-type - {String} ($mq-media-type) Media type: screen, printâ€¦
//
// Styleguide 2.1.4
//


// @mixin gap
//
// This is to account for the eminent deprecation of [`grid-gap`](https://developer.mozilla.org/en-US/docs/Web/CSS/gap). Some browsers honor `gap`, while others are living in the past with `grid-gap`. This keeps us working for both names. Eventually, we can remove this mixin in favor of just using gap. The new `gap` naming is introduced on Chrome 68+, Safari 11.2, Firefox 61+, and Edge 16+<br>Example: `.my-grid { @include gap($size-m) }`
//
// $size = $size-b - Size of gap
//
// Styleguide 2.1.3
//
@mixin gap($size: $size-b) {
  grid-gap: $size;
  gap: $size;
}