// Grid
//
// This is a flexbox based grid. In the future, we'll start to rely more on CSS grid and slowly phase out this grid, piece by piece.
//
// _Replacements so far:_<br>
// grid_separator => [**has-{size}-btm-marg**](/pages/utilities/index.html#margin-has-size-btm-marg) <br>
// grid_container => [**l-container**](#container-l-container) <br>
// grid_padded => [**has-page-padding**](/pages/utilities/index.html#padding-has-padding) <br>
// section_padded => [**has-section-padding**](/pages/utilities/index.html#padding-has-padding) <br>
// grid_padded--temp => [**has-page-padding-at-bp-l**](/pages/utilities/index.html#padding-has-padding) <br>
// col_adunit300x250 => Removed <br>
// hide_from--{size}/hide_until--{size} => [**is-hidden-from-{size}/is-hidden-until-{size}**](pages/utilities/index.html#hidden-is-hidden-specifier)
//
// Markup: 7-layout/grid.html
//
//
// Styleguide 7.0.1
//

$grid-columns: 12;
$grid-gutter: $size-b;
$grid-gutter-px: 17.6;
$grid-size-list: (
  (s, bp-s, $bp-s),
  (m, bp-m, $bp-m),
  (l, bp-l, $bp-l),
  (xl, bp-xl, $bp-xl),
  (xxl, bp-xxl, $bp-xxl)
);
$column-slug: col !default;

@function get-col-percent($column-num) {
  @return percentage($column-num / $grid-columns);
}

@function omega($column-num) {
  @return $grid-gutter-px - ($grid-gutter-px / ($grid-columns/$column-num)) +
    'px';
}

%flex-grid {
  display: flex;

  > :last-child {
    margin-right: 0;
  }
}

%flex-col {
  flex: 0 1 100%;
  margin-right: $grid-gutter;
  max-width: 100%;
}

.col {
  @extend %flex-col;

  // .col_inline
  // allow flex items to auto-size rather than fill available width
  &_inline {
    flex: 0 1 auto;
    margin-right: $grid-gutter;
  }
}

// .col_{$i}
@for $i from 1 through $grid-columns {
  // Create extension for column sizes 1-12
  // It would be ideal to put the width as the third value in the flex property
  // but IE 10 and 11 don't like that if it involves calc():
  // https://github.com/philipwalton/flexbugs#8-flex-basis-doesnt-support-calc
  %#{$column-slug}_#{$i} {
    flex: 0 1 auto;
    margin-right: $grid-gutter;
    overflow: hidden;
    width: calc(#{get-col-percent($i)} - #{omega($i)});
  }

  // Create column class that resets to full width at bp-l
  .#{$column-slug}_#{$i} {
    @extend %#{$column-slug}_#{$i};
  }
}


.grid {
  display: flex;
  flex-wrap: wrap;

  // .grid_row
  // force flex items into a row
  &_row {
    @extend %flex-grid;
    flex-wrap: nowrap;
  }


  &_order {
    &--primary {
      order: -1;
    }

    &--secondary {
      order: 1;
    }
  }

  // Option to change directions
  &_vertical {
    flex-direction: column;
  }
}

@each $size, $bp, $width in $grid-size-list {
  // Set column size from a breakpoint
  // .small--6 sets 6/12 columns from bp-s onward
  @for $i from 1 through $grid-columns {
    .col_#{$i}--#{$size} {
      @include mq($from: $bp) {
        flex: 0 1 auto;
        margin-right: $grid-gutter;
        overflow: hidden;
        width: calc(#{get-col-percent($i)} - #{omega($i)});
      }
    }
  }

  .grid_separator--until_#{$size} {
    @include mq($until: $bp) {
      margin-bottom: $grid-gutter;
    }
  }

  .grid_row--until_#{$size} {
    @include mq($until: $bp) {
      display: flex;
      flex-wrap: nowrap;

      > :last-child {
        margin-right: 0;
      }
    }
  }

  .grid_row--from_#{$size} {
    @include mq($from: $bp) {
      display: flex;
      flex-wrap: nowrap;

      > :last-child {
        margin-right: 0;
      }
    }
  }

  .grid_row--m_to_l {
    @include mq($from: $bp-m, $until: $bp-l) {
      display: flex;
      flex-wrap: nowrap;

      > :last-child {
        margin-right: 0;
      }
    }
  }

  /**
    Use the following two classes in tandem,
    probably with .col and .col_300x250
    together in a row. It flips the order
    at different breakpoints, which can be
    useful when stacking.
  */
  .grid_order--secondary--until_#{$size} {
    order: 1;

    @include mq($until: $bp) {
      order: 2;
    }
  }

  .grid_order--primary--until_#{$size} {
    order: 2;

    @include mq($until: $bp) {
      order: 1;
    }
  }

  // .grid_wrap
  // allow items in a grid_row to wrap until a breakpoint
  .grid_wrap--#{$size} {
    @include mq($until: $bp) {
      flex-wrap: wrap;

      @for $i from 1 through $grid-columns {
        > .#{$column-slug}_#{$i},
        > .col {
          flex: 0 1 100%;
          margin-right: 0;
          max-width: 100%;
        }
      }
    }

    &.grid_wrap--reverse {
      @include mq($until: $bp) {
        flex-wrap: wrap-reverse;

        @for $i from 1 through $grid-columns {
          > .#{$column-slug}_#{$i},
          > .col {
            flex: 0 1 100%;
            margin-right: 0;
            max-width: 100%;
          }
        }
      }
    }
  }
}

.col_omega {
  margin-right: 0;
}
