// Columns (l-col-<size>-<bp>)
//
// A library of column width classes, meant to play well with column-setter. For example, `l-col-4@bp-l`, `l-col-2-from-bp-xl`, `l-col-1-until-bp-s`, etc. {{isHelper}}
//
// Markup: 7-layout/columns.html
//
// Styleguide 7.0.5

@function mapReverse ($map) {
  $result: null;

  @if type-of($map) == 'map' {
    $keys: map-keys($map);
    $map-reversed: ();
      
    @for $i from length($keys) through 1 {
      $map-reversed: map-merge(
        $map-reversed,
        (nth($keys, $i): map-get($map, nth($keys, $i)))
      );
    }

    @if type-of($map-reversed) == 'map' {
      $result: $map-reversed;
    } @else {
      @warn 'There was an error reversing the order of "#{$map}"';
    }
  } @else {
    @warn '"#{$map}" is not a valid map';
  }

  @return $result;
}

$breakpoints-reversed: mapReverse($breakpoints);

.l-row {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
}

.l-col,
[class*='l-col-'] {
  // Create base styling -- 100% width, with default padding.
  @each $bp, $value in $breakpoints {
    $total-cols: bp-attribute($bp, cols);

    @include breakpoint-min($bp) {
      padding-left: colspan(p, $total-cols);
      padding-right: colspan(p, $total-cols);
      width: colspan($total-cols, $total-cols);
    }
  }

  &.l-row {
    padding-left: 0;
    padding-right: 0;
  }
}

// Create `from` classes by iterating through breakpoints from least to greatest.
@each $bp, $value in $breakpoints {
  $total-cols: bp-attribute($bp, cols);
  $current-index: index(($breakpoints), ($bp $value));

  @for $i from 1 through $total-cols {
    // e.g. .l-col-3-from-bp-s
    @include breakpoint-min($bp) {
      .l-col-#{$i}-from-#{$bp} {
        padding-left: colspan(p, $total-cols);
        padding-right: colspan(p, $total-cols);
        width: colspan($i, $total-cols);

        // e.g. .l-col-3-from-bp-s .l-col-1-from-bp-s
        @for $j from 1 through $i {
          .l-col-#{$j}-from-#{$bp} {
            padding-left: colspan(p, $i);
            padding-right: colspan(p, $i);
            width: colspan($j, $i);
          }
        }
      }
    }
  }
}

// Create `to` classes by iterating through breakpoints from greatest to least.
@each $bp, $value in $breakpoints-reversed {
  $total-cols: bp-attribute($bp, cols);
  $current-index: index(($breakpoints-reversed), ($bp $value));

  @for $i from 1 through $total-cols {
    // e.g. .l-col-3-until-bp-s
    @include breakpoint-max($bp) {
      .l-col-#{$i}-until-#{$bp} {
        padding-left: colspan(p, $total-cols);
        padding-right: colspan(p, $total-cols);
        width: colspan($i, $total-cols);

        // e.g. .l-col-3-until-bp-s .l-col-1-until-bp-s
        @for $j from 1 through $i {
          .l-col-#{$j}-until-#{$bp} {
            padding-left: colspan(p, $i);
            padding-right: colspan(p, $i);
            width: colspan($j, $i);
          }
        }
      }
    }
  }
}

// Create `@` classes by iterating through breakpoints from least to greatest.
@each $bp, $value in $breakpoints {
  $total-cols: bp-attribute($bp, cols);
  $current-index: index(($breakpoints), ($bp $value));

  @for $i from 1 through $total-cols {
    // e.g. .l-col-3@bp-s
    @if $current-index + 1 <= length(map-keys($breakpoints)) {
      $bp-next: nth(map-keys($breakpoints), $current-index + 1);
      @include breakpoint-range($bp, $bp-next) {
        .l-col-#{$i}\@#{$bp} {
          padding-left: colspan(p, $total-cols);
          padding-right: colspan(p, $total-cols);
          width: colspan($i, $total-cols);

          // e.g. .l-col-3@bp-s .l-col-1@bp-s
          @for $j from 1 through $i {
            .l-col-#{$j}\@#{$bp} {
              padding-left: colspan(p, $i);
              padding-right: colspan(p, $i);
              width: colspan($j, $i);
            }
          }
        }
      }
    } @else {
      // i.e. bp-xxl (or whatever the max bp is)
      @include breakpoint-min($bp) {
        .l-col-#{$i}\@#{$bp} {
          padding-left: colspan(p, $total-cols);
          padding-right: colspan(p, $total-cols);
          width: colspan($i, $total-cols);

          // e.g. .l-col-3@bp-s .l-col-1@bp-s
          @for $j from 1 through $i {
            .l-col-#{$j}\@#{$bp} {
              padding-left: colspan(p, $i);
              padding-right: colspan(p, $i);
              width: colspan($j, $i);
            }
          }
        }
      }
    }
  }
}
