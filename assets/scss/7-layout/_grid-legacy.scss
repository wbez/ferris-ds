// Grid Container (grid_container)
//
// Deprecated: Max width container, centered with margin auto {{isHelper}}
//
// grid_container - 960px
// grid_container--s - 520px
// grid_container--m - 650px
// grid_container--l - 845px
// grid_container--xl - 1080px
// grid_container--xxl - 1300px
//
// Markup: <div style="border: 2px solid black; padding: 20px;" class="{{ className }} container-demo"><strong>{{ className }}</strong> (<span></span>)</div>
//
// Styleguide 7.0.1
//

// Grid Separator (grid_separator)
//
// Deprecated: Adds varying amounts of bottom spacing. We're replacing that with our margin utility class. {{isHelper}}
//
// .grid_separator - 1.1rem
// .grid_separator--xs - .275rem
// .grid_separator--s - .55rem
// .grid_separator--m - 1.2rem
// .grid_separator--l - 1.5rem
// .grid_separator--xl - 1.75rem
// .grid_separator--xxl - 2rem
// .grid_separator--xxxl - 3rem
//
// Markup: <ul><li class="{{ className }}" style="border:2px solid black;">Example</li><li style="border:2px solid black;">Example</li></ul>
//
//
// Styleguide 7.0.1
//


// Grid Padded (grid_padded)
//
// Deprecated: Adds side padding at various viewport widths. Note: Demo is best viewed in [standalone preview](/pages/layout/grid_padded/raw-preview.html). {{isHelper}}
//
// .grid_padded - Left/right padding:<br>`.92rem` mobile<br> `1.1rem` tablet - desktop <br>`0` large desktop
// .grid_padded--temp - Left/right padding:<br>`0` mobile - small desktop<br>`1.1rem` desktop<br>`0` large desktop
// .grid_padded--s - Left/right padding:<br>`1.1rem` mobile<br>`0` tablet+
// .grid_padded--m - Left/right padding:<br>`1.1rem` tablet<br>`0` small desktop+
// .grid_padded--l - Left/right padding:<br>`1.1rem` small desktop<br>`0` desktop+
// .grid_padded--xl - Left/right padding:<br>`1.1rem` desktop<br>`0` large desktop+
// .grid_padded--xxl - Left/right padding:<br>`1.1rem` large desktop<br>`0` large desktop+
//
// Markup: <div class="{{ className }}" style="border:2px solid black; background: #eee;"><div style="background-color: black; color: white; height: 30px">{{ className }}</div></div>
//
//
// Styleguide 7.0.1
//

// Hide (hide_<from | until>--<size>)
//
// Deprecated: Adds varying amounts side padding. Note: Demo is best viewed in [standalone preview](/pages/layout/grid_padded/raw-preview.html). {{isHelper}}
//
// .hide_from--s - Hide from large mobile onward; Show small mobile only
// .hide_from--m - Hide from tablet onward; Show on all mobile
// .hide_from--l - Hide from small desktop onward; Show on all mobile and tablet
// .hide_from--xl - Hide from desktop onward; Show on all mobile, tablet, and small desktop
// .hide_from--xxl - Hide from large desktop onward; Show on all mobile, tablet, small desktop, and desktop
// .hide_until--s - Hide until large mobile; Show on large mobile, tablet, desktop
// .hide_until--m - Hide until tablet; Show tablet, desktop
// .hide_until--l - Hide until small desktop; Show all desktop
// .hide_until--xl - Hide until desktop; Show desktop, large desktop
// .hide_until--xxl - Hide until large desktop; Show on large desktop only
//
// Markup: <div style="background:#ffc200;" class="{{ className }}"><strong>{{ className }}</strong>: Resize to see me appear/disappear</div>
//
// Styleguide 7.0.1
//


// Section Padding (section_padded)
//
// Deprecated: Adds top/bottom padding for sections. Usually used with grid_padded.
//
//
// Markup: <div class="section_padded" style="border:2px solid black; background: #eee;"><div style="background-color: black; color: white; height: 30px">section_padded</div></div>
//
// Styleguide 7.0.1
//
$grid-columns: 12;
$grid-gutter: $size-b;
$grid-gutter-px: 17.6;
$grid-size-list: (
  (s, bp-s, $bp-s),
  (m, bp-m, $bp-m),
  (l, bp-l, $bp-l),
  (xl, bp-xl, $bp-xl),
  (xxl, bp-xxl, $bp-xxl)
);
$column-slug: col !default;

@function get-col-percent($column-num) {
  @return percentage($column-num / $grid-columns);
}

@function omega($column-num) {
  @return $grid-gutter-px - ($grid-gutter-px / ($grid-columns/$column-num)) +
    'px';
}

%flex-grid {
  display: flex;

  > :last-child {
    margin-right: 0;
  }
}

%flex-col {
  flex: 0 1 100%;
  margin-right: $grid-gutter;
  max-width: 100%;
}

.col {
  @extend %flex-col;

  // .col_inline
  // allow flex items to auto-size rather than fill available width
  &_inline {
    flex: 0 1 auto;
    margin-right: $grid-gutter;
  }
}

// .col_{$i}
@for $i from 1 through $grid-columns {
  // Create extension for column sizes 1-12
  // It would be ideal to put the width as the third value in the flex property
  // but IE 10 and 11 don't like that if it involves calc():
  // https://github.com/philipwalton/flexbugs#8-flex-basis-doesnt-support-calc
  %#{$column-slug}_#{$i} {
    flex: 0 1 auto;
    margin-right: $grid-gutter;
    overflow: hidden;
    width: calc(#{get-col-percent($i)} - #{omega($i)});
  }

  // Create column class that resets to full width at bp-l
  .#{$column-slug}_#{$i} {
    @extend %#{$column-slug}_#{$i};
  }
}

.col_adunit300x250 {
  @extend %flex-col;
  margin-right: 0;
  max-width: 310px;
}

.grid {
  display: flex;
  flex-wrap: wrap;

  &_container {
    margin-left: auto;
    margin-right: auto;
    max-width: $bp-default;
  }

  // .grid_row
  // force flex items into a row
  &_row {
    @extend %flex-grid;
    flex-wrap: nowrap;
  }

  // .grid_padded -- DEFAULT
  // adds left/right padding on small screens
  &_padded {
    padding: 0 $size-xs;

    @include mq($from: bp-m, $until: bp-xl) {
      padding: 0 $size-b;
    }

    @include mq($from: bp-xl) {
      padding: 0;
    }
  }

  // Custom setting for story page lead art
  // adds left/right padding on middle-size screens
  &_padded--temp {
    padding: 0;

    @include mq($from: bp-l, $until: bp-xl) {
      padding: 0 $size-b;
    }
  }

  // adds margin-bottom to separate elements
  &_separator {
    margin-bottom: $grid-gutter;
  }

  &_separator--xs {
    margin-bottom: $grid-gutter/4;
  }

  &_separator--s {
    margin-bottom: $grid-gutter/2;
  }

  &_separator--m {
    margin-bottom: $size-m;
  }

  &_separator--l {
    margin-bottom: $size-l;
  }

  &_separator--xl {
    margin-bottom: $size-xl;
  }

  &_separator--xxl {
    margin-bottom: $size-xxl;
  }

  &_separator--xxxl {
    margin-bottom: $size-xxxl;
  }

  &_order {
    &--primary {
      order: -1;
    }

    &--secondary {
      order: 1;
    }
  }

  // Option to change directions
  &_vertical {
    flex-direction: column;
  }
}

@each $size, $bp, $width in $grid-size-list {
  // Set column size from a breakpoint
  // .small--6 sets 6/12 columns from bp-s onward
  @for $i from 1 through $grid-columns {
    .col_#{$i}--#{$size} {
      @include mq($from: $bp) {
        flex: 0 1 auto;
        margin-right: $grid-gutter;
        overflow: hidden;
        width: calc(#{get-col-percent($i)} - #{omega($i)});
      }
    }
  }

  // Set max container width based on breakpoint sizes
  .grid_container--#{$size} {
    margin-left: auto;
    margin-right: auto;
    max-width: $width;
  }

  .grid_separator--until_#{$size} {
    @include mq($until: $bp) {
      margin-bottom: $grid-gutter;
    }
  }

  .grid_row--until_#{$size} {
    @include mq($until: $bp) {
      display: flex;
      flex-wrap: nowrap;

      > :last-child {
        margin-right: 0;
      }
    }
  }

  .grid_row--from_#{$size} {
    @include mq($from: $bp) {
      display: flex;
      flex-wrap: nowrap;

      > :last-child {
        margin-right: 0;
      }
    }
  }

  .grid_row--m_to_l {
    @include mq($from: $bp-m, $until: $bp-l) {
      display: flex;
      flex-wrap: nowrap;

      > :last-child {
        margin-right: 0;
      }
    }
  }

  /**
    Use the following two classes in tandem,
    probably with .col and .col_adunit300x250
    together in a row. It flips the order
    at different breakpoints, which can be
    useful when stacking.
  */
  .grid_order--secondary--until_#{$size} {
    order: 1;

    @include mq($until: $bp) {
      order: 2;
    }
  }

  .grid_order--primary--until_#{$size} {
    order: 2;

    @include mq($until: $bp) {
      order: 1;
    }
  }

  // .grid_wrap
  // allow items in a grid_row to wrap until a breakpoint
  .grid_wrap--#{$size} {
    @include mq($until: $bp) {
      flex-wrap: wrap;

      @for $i from 1 through $grid-columns {
        > .#{$column-slug}_#{$i},
        > .col {
          flex: 0 1 100%;
          margin-right: 0;
          max-width: 100%;
        }
      }
    }

    &.grid_wrap--reverse {
      @include mq($until: $bp) {
        flex-wrap: wrap-reverse;

        @for $i from 1 through $grid-columns {
          > .#{$column-slug}_#{$i},
          > .col {
            flex: 0 1 100%;
            margin-right: 0;
            max-width: 100%;
          }
        }
      }
    }

    .col_adunit300x250 {
      flex: 0 1 100%;
      margin-right: 0;
      max-width: 100%;

      @include mq($from: $bp) {
        margin-left: 0;
        margin-right: 0;
        max-width: 310px;
      }
    }
  }

  // Set left/right padded until a breakpoint
  // grid_padded--m = 1.1rem padding until bp-m
  .grid_padded--#{$size} {
    @include mq($until: $bp-xs) {
      padding: 0 $size-xs;
    }

    @include mq($until: $bp) {
      padding: 0 $size-b;
    }
  }

  // Hide element screens > $bp
  // i.e. display until $bp
  .hide_from {
    &--#{$size} {
      @include mq($from: $bp) {
        display: none !important;
      }
    }
  }

  // Hide element screens < $bp
  // i.e. display from $bp
  .hide_until {
    &--#{$size} {
      @include mq($until: $bp) {
        display: none !important;
      }
    }
  }
}

.col_omega {
  margin-right: 0;
}

.section_padded {
  padding-top: $size-xxxl;
  padding-bottom: $size-xxxl;
  @include mq($until: bp-m) {
    padding-top: $size-xl;
    padding-bottom: $size-xl;
  }
}
