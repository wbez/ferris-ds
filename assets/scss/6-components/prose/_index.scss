// Prose (c-prose)
//
// Story bodies are a special component because we have limited control over the class names within them. We must deviate from BEM and create catch-all tag selectors to allow the greatest flexibility of the markup.
//
// Markup: 6-components/prose/prose.html
//
// Styleguide 6.1.3

$story-narrow: px-to-rem($bp-default * (colspan(8, 12) / 100%));

.c-prose {
  line-height: $line-height-b;

  p,
  blockquote,
  ul,
  ol,
  dl,
  pre,
  figure,
  table {
    margin-top: $size-b;
    margin-bottom: $size-b;
  }

  figcaption {
    margin-top: 0.5em;
  }

  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    margin-top: $size-b;
    margin-top: unquote('max(#{$size-b}, 1em)');
    margin-bottom: $size-b;
  }

  ul {
    list-style: disc;
    list-style-position: outside;
    padding: 0 $size-b;
  }

  ul ul,
  ol ul,
  dl ul {
    list-style-type: circle;
  }

  ul ul ul,
  ul ol ul,
  ul dl ul,
  ol ul ul,
  ol ol ul,
  ol dl ul,
  dl ul ul,
  dl ol ul,
  dl dl ul {
    list-style-type: square;
  }

  ol {
    list-style: decimal;
    list-style-position: outside;
    padding: 0 $size-b;
  }

  ul ol,
  ol ol,
  dl ol {
    list-style-type: lower-alpha;
  }

  li {
    margin-top: $size-s;
  }

  dl {
    dt {
      font-weight: bold;
    }

    dd {
      margin-left: $size-s;
    }

    dd + dt {
      margin-top: $size-xxxs;
    }
  }

  .pull-right {
    @include breakpoint-max(bp-s) {
      float: none;
    }

    @include breakpoint-min(bp-s) {
      margin-left: colspan(g, 6) + colspan(p, 6);
      margin-top: $size-b;
      margin-bottom: $size-b;
      max-width: colspan(3, 6);
    }

    @include breakpoint-min(bp-l) {
      margin-left: colspan(g, 8) + colspan(p, 8);
      margin-top: $size-b;
      margin-bottom: $size-b;
      max-width: px-to-rem(
        $bp-default * ((colspan(4, 12) - colspan(g, 12)) / 100%)
      );
    }
  }

  .pull-left {
    @include breakpoint-max(bp-s) {
      float: none;
    }

    @include breakpoint-min(bp-s) {
      margin-right: colspan(g, 6) + colspan(p, 6);
      margin-top: $size-b;
      margin-bottom: $size-b;
      max-width: colspan(3, 6);
    }

    @include breakpoint-min(bp-l) {
      margin-right: colspan(g, 8) + colspan(p, 8);
      margin-top: $size-b;
      margin-bottom: $size-b;
      max-width: px-to-rem(
        $bp-default * ((colspan(4, 12) - colspan(g, 12)) / 100%)
      );
    }
  }
}

.c-prose.-compact {
  > :first-child {
    margin-top: 0;
  }

  > :last-child {
    margin-bottom: 0;
  }
}

.c-prose.-story {
  @extend .t-links, .-story;
  @include font-setting(serif);
  font-size: $size-b;
  max-width: $story-narrow;
  margin-left: auto;
  margin-right: auto;

  .fit-copy {
    margin-left: 0;
    margin-right: 0;
    width: 100%;
  }

  .fit-outer {
    @include breakpoint-min(bp-l) {
      margin-left: colspan(-1, 8) + colspan(g, 8) + colspan(p, 8);
      margin-right: colspan(-1, 8) + colspan(g, 8) + colspan(p, 8);
      // stylelint-disable-next-line declaration-no-important
      width: colspan(10, 8) - 2 * colspan(p, 8) !important;
    }
  }

  .pull-right {
    // pull out of story well
    @include breakpoint-min(bp-l) {
      margin-right: colspan(-1, 8) + colspan(g, 8) + colspan(p, 8);
    }
  }

  .pull-left {
    // pull out of story well
    @include breakpoint-min(bp-l) {
      margin-left: colspan(-1, 8) + colspan(g, 8) + colspan(p, 8);
    }
  }

  blockquote {
    $blockquote-border-color: #048282;
    $blockquote-selector: #{&};

    @import '../../cookbook/blockquote';
  }

  hr {
    $hr-selector: #{&};

    @import '../../cookbook/hairline';
  }
}
